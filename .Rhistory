get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
df.match <- df.match.1t %>%
bind_rows(df.match.2t)
#Balanceamento depois do propensity
df.psm %>%
semi_join(df.match, by = "id_municipio") %>%
mutate(ps = predict(glm(modelo.psm, data = ., family = binomial(link = "logit")), type = "response")) %>%
ggplot() +
geom_density(aes(ps, fill = tratamento), alpha = .7) +
facet_wrap("turno")
#TABELA DE RESULTADOS
modelsummary(list(
feols(modelo.feols, data = df.match %>% filter(turno == 1)),
feols(modelo.faols, data = df.match %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)),
feols(modelo.faols.controle, data = df.match %>% filter(turno == 1))
),
# stars = T,
# statistic = "({p.value})",
estimate = "{estimate} {stars}",
statistic = NULL,
coef_rename = c("log(pib_pc)" = "log(PIB per capita)"),
gof_omit = "AIC|BIC|F|Lik|Std.Errors|RMSE")
#VISUALIZAÇÃO DO EVENT STUDY
iplot(feols(modelo.feols, data = df.match %>% filter(turno == 1)))
iplot(feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)))
#VISUALIZAÇÃO DO EVENT STUDY
iplot(list(
feols(modelo.feols, data = df.match %>% filter(turno == 1)),
feols(modelo.feols, data = df.match %>% filter(turno == 2))
))
iplot(list(
feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.match %>% filter(turno == 2))
))
df.test <- df.match
modelo.feols.controle.heterogen <- log(abstencao) ~
log(competitividade) + log(pib_pc) + log(beneficiados) + ideb + log(populacao) +
log(pib_governo) + log(eleitores_secao) + trat * factor(ntile(pib_pc,5))| id_municipio + ano
#TABELA DE RESULTADOS
modelsummary(
feols(modelo.feols.controle.heterogen, data = df.test %>% filter(turno == 2)),
# stars = T,
statistic = "({p.value})",
estimate = "{estimate} {stars}",
# statistic = NULL,
coef_rename = c("log(pib_pc)" = "log(PIB per capita)"),
gof_omit = "AIC|BIC|F|Lik|Std.Errors|RMSE")
iplot(list(
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 1)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 2)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 3)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 4))
))
#VISUALIZAÇÃO DO EVENT STUDY
iplot(list(
feols(modelo.feols, data = df.match %>% filter(turno == 1)),
feols(modelo.feols, data = df.match %>% filter(turno == 2))
))
iplot(list(
feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.match %>% filter(turno == 2))
))
df.test <- df.match
modelo.feols.controle.heterogen <- log(abstencao) ~
log(competitividade) + log(pib_pc) + log(beneficiados) + ideb + log(populacao) +
log(pib_governo) + log(eleitores_secao) + trat * factor(ntile(pib_pc,5))| id_municipio + ano
#TABELA DE RESULTADOS
modelsummary(
feols(modelo.feols.controle.heterogen, data = df.test %>% filter(turno == 2)),
# stars = T,
statistic = "({p.value})",
estimate = "{estimate} {stars}",
# statistic = NULL,
coef_rename = c("log(pib_pc)" = "log(PIB per capita)"),
gof_omit = "AIC|BIC|F|Lik|Std.Errors|RMSE")
iplot(list(
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 1)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 2)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 3)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 4))
))
[1:5]
C(1:5)
c(1:5)
?for
()
for (quantil in c(1:5)) {
print(quantil)
}
View(df.psm)
#Variáveis do propensity
df.psm <- read_csv("output/psm.csv") %>%
#Grupo controle ou tratamento
left_join(
df.A %>%
filter(ano == 2022) %>%
select(id_municipio, tratamento, turno)
) %>%
#Abstenção de 2018
left_join(
df.A %>%
filter(ano == 2018) %>% select(id_municipio, abstencao, turno) %>%
rename("abstencao_2018" = "abstencao")
) %>%
#Variáveis médias antes de 2022
left_join(
df.A %>% filter(ano <2022) %>%
group_by(c(id_municipio, turno)) %>%
summarize(competitividade = mean(competitividade), pib_pc = mean(pib_pc),
beneficiados = mean(beneficiados), pib_governo = mean(pib_governo),
eleitores_secao = mean(eleitores_secao))) %>%
mutate(populacao_urbana = populacao_urbana/populacao) %>%
drop_na()
#Variáveis do propensity
df.psm <- read_csv("output/psm.csv") %>%
#Grupo controle ou tratamento
left_join(
df.A %>%
filter(ano == 2022) %>%
select(id_municipio, tratamento, turno)
) %>%
#Abstenção de 2018
left_join(
df.A %>%
filter(ano == 2018) %>% select(id_municipio, abstencao, turno) %>%
rename("abstencao_2018" = "abstencao")
) %>%
#Variáveis médias antes de 2022
left_join(
df.A %>% filter(ano <2022) %>%
group_by(id_municipio, turno) %>%
summarize(competitividade = mean(competitividade), pib_pc = mean(pib_pc),
beneficiados = mean(beneficiados), pib_governo = mean(pib_governo),
eleitores_secao = mean(eleitores_secao))) %>%
mutate(populacao_urbana = populacao_urbana/populacao) %>%
drop_na()
View(df.psm)
#VISUALIZAÇÃO DO EVENT STUDY
iplot(list(
feols(modelo.feols, data = df.A %>% filter(turno == 1)),
feols(modelo.feols, data = df.A %>% filter(turno == 2))
))
iplot(list(
feols(modelo.feols.controle, data = df.A %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.A %>% filter(turno == 2))
))
psm <- glm(modelo.psm, data = df.psm, family = binomial(link = "logit"))
#Balanceamento antes do PSM
df.psm %>%
mutate(ps = predict(glm(modelo.psm, data = ., family = binomial(link = "logit")), type = "response")) %>%
ggplot() +
geom_density(aes(ps, fill = tratamento), alpha = .7) +
facet_wrap("turno")
df.match.1t <- matchit(modelo.psm, data=df.psm %>% filter(turno == 1), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 1)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 1))
df.match.2t <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
df.match <- df.match.1t %>%
bind_rows(df.match.2t)
#Balanceamento depois do propensity
df.psm %>%
semi_join(df.match, by = "id_municipio") %>%
mutate(ps = predict(glm(modelo.psm, data = ., family = binomial(link = "logit")), type = "response")) %>%
ggplot() +
geom_density(aes(ps, fill = tratamento), alpha = .7) +
facet_wrap("turno")
#TABELA DE RESULTADOS
modelsummary(list(
feols(modelo.feols, data = df.match %>% filter(turno == 1)),
feols(modelo.faols, data = df.match %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)),
feols(modelo.faols.controle, data = df.match %>% filter(turno == 1))
),
# stars = T,
# statistic = "({p.value})",
estimate = "{estimate} {stars}",
statistic = NULL,
coef_rename = c("log(pib_pc)" = "log(PIB per capita)"),
gof_omit = "AIC|BIC|F|Lik|Std.Errors|RMSE")
#VISUALIZAÇÃO DO EVENT STUDY
iplot(feols(modelo.feols, data = df.match %>% filter(turno == 1)))
iplot(feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)))
#VISUALIZAÇÃO DO EVENT STUDY
iplot(list(
feols(modelo.feols, data = df.match %>% filter(turno == 1)),
feols(modelo.feols, data = df.match %>% filter(turno == 2))
))
iplot(list(
feols(modelo.feols.controle, data = df.match %>% filter(turno == 1)),
feols(modelo.feols.controle, data = df.match %>% filter(turno == 2))
))
df.test <- df.match %>%
mutate(quantil = factor(ntile(.$pib_pc,4)))
modelo.feols.controle.heterogen <- log(abstencao) ~
log(competitividade) + log(pib_pc) + log(beneficiados) + ideb + log(populacao) +
log(pib_governo) + log(eleitores_secao) + trat * factor(ntile(pib_pc,5))| id_municipio + ano
#TABELA DE RESULTADOS
modelsummary(
feols(modelo.feols.controle.heterogen, data = df.test %>% filter(turno == 2)),
# stars = T,
statistic = "({p.value})",
estimate = "{estimate} {stars}",
# statistic = NULL,
coef_rename = c("log(pib_pc)" = "log(PIB per capita)"),
gof_omit = "AIC|BIC|F|Lik|Std.Errors|RMSE")
iplot(list(
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 1)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 2)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 3)),
feols(modelo.feols, data = df.test %>% filter(turno == 2 & quantil == 4))
))
iplot(list(
feols(modelo.feols, data = df.test %>% filter(turno == 1 & quantil == 1)),
feols(modelo.feols, data = df.test %>% filter(turno == 1 & quantil == 2)),
feols(modelo.feols, data = df.test %>% filter(turno == 1 & quantil == 3)),
feols(modelo.feols, data = df.test %>% filter(turno == 1 & quantil == 4))
))
for (quantil in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == quantil), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 1))
)
}
df.match.segmented <- data.frame()
for (quantil in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == quantil), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 1))
)
}
df.match.segmented <- data.frame()
for (quantil in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == quantil), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
View(df.match.segmented)
matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == 1), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
modelo.psm <- factor(tratamento) ~ razao_dependencia + taxa_envelhecimento + expectativa_anos_estudo +
taxa_analfabetismo_18_mais + indice_gini + prop_pobreza_extrema + log(renda_pc) + idhm +
taxa_desocupacao_18_mais  + taxa_agua_encanada + log(populacao) + populacao_urbana +
log(abstencao_2018) + log(competitividade) + log(pib_pc) + log(beneficiados) + pib_governo + eleitores_secao
matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
df.psm %>% filter(turno == 2 & quantil == 2) %>% View()
View(df.psm)
#Variáveis do propensity
df.psm <- read_csv("output/psm.csv") %>%
#Grupo controle ou tratamento
left_join(
df.A %>%
filter(ano == 2022) %>%
select(id_municipio, tratamento, turno)
) %>%
#Abstenção de 2018
left_join(
df.A %>%
filter(ano == 2018) %>% select(id_municipio, abstencao, turno) %>%
rename("abstencao_2018" = "abstencao")
) %>%
#Variáveis médias antes de 2022
left_join(
df.A %>% filter(ano <2022) %>%
group_by(id_municipio, turno) %>%
summarize(competitividade = mean(competitividade), pib_pc = mean(pib_pc),
beneficiados = mean(beneficiados), pib_governo = mean(pib_governo),
eleitores_secao = mean(eleitores_secao))) %>%
mutate(populacao_urbana = populacao_urbana/populacao,
quantil = factor(ntile(.$pib_pc,4))) %>%
drop_na()
df.psm %>% filter(turno == 2 & quantil == 2) %>% View()
psm <- glm(modelo.psm, data = df.psm, family = binomial(link = "logit"))
df.match.segmented <- data.frame()
for (quantil in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == quantil), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
View(df.match.segmented)
df.psm %>% filter(turno == 2 & quantil == 1) %>% View()
df.match.segmented <- data.frame()
for (quantil in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == quantil)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
df.psm %>% filter(turno == 2) %>% View()
df.psm %>% filter(turno == 2) %>% get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == quantil)) %>% View()
df.psm %>%
filter(turno == 2) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == quantil)) %>%
View()
df.psm %>% filter(turno == 2) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == quantil)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == quantil)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 1)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 1)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 2)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 1), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 1)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == 1), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 1)) %>%
View()
matchit(modelo.psm, data=df.psm %>% filter(turno == 2 & quantil == 1), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2 & quantil == 1)) %>%
left_join(df.A %>% filter(turno == 2)) %>%
View()
df.match.segmented <- data.frame()
for (quantil.i in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(update(modelo.psm, . * (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(update(modelo.psm, . : (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(update(modelo.psm, . * (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
#Variáveis do propensity
df.psm <- read_csv("output/psm.csv") %>%
#Grupo controle ou tratamento
left_join(
df.A %>%
filter(ano == 2022) %>%
select(id_municipio, tratamento, turno)
) %>%
#Abstenção de 2018
left_join(
df.A %>%
filter(ano == 2018) %>% select(id_municipio, abstencao, turno) %>%
rename("abstencao_2018" = "abstencao")
) %>%
#Variáveis médias antes de 2022
left_join(
df.A %>% filter(ano <2022) %>%
group_by(id_municipio, turno) %>%
summarize(competitividade = mean(competitividade), pib_pc = mean(pib_pc),
beneficiados = mean(beneficiados), pib_governo = mean(pib_governo),
eleitores_secao = mean(eleitores_secao))) %>%
mutate(populacao_urbana = populacao_urbana/populacao,
quantil = ntile(.$pib_pc,4)) %>%
drop_na()
modelo.psm <- tratamento ~ razao_dependencia + taxa_envelhecimento + expectativa_anos_estudo +
taxa_analfabetismo_18_mais + indice_gini + prop_pobreza_extrema + log(renda_pc) + idhm +
taxa_desocupacao_18_mais  + taxa_agua_encanada + log(populacao) + populacao_urbana +
log(abstencao_2018) + log(competitividade) + log(pib_pc) + log(beneficiados) + pib_governo + eleitores_secao
for (quantil.i in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
df.match <- matchit(update(modelo.psm, . * (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
View(df.match.segmented)
matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
left_join(df.A %>% filter(turno == 2)) %>%
View()
df.match <- matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
df.match.segmented <- data.frame()
for (quantil.i in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
matchit(update(modelo.psm, . * (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2)) %>%
View()
#Estatísticas descritivas
df %>%
filter(ano == 2022) %>%
datasummary((tratamento_A + controle_A + tratamento_B + controle_B) * (abstencao) ~ (Mean + N) * (factor(turno)), .,
fmt = 3)
matchit(update(modelo.psm, . * (quantil == 1) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
View()
matchit(update(modelo.psm, factor(. * (quantil == 1)) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
View()
View(df.match.segmented)
matchit(update(modelo.psm, factor(test) ~ .), data=df.psm %>% filter(turno == 2) %>% mutate(test = ifelse((quantil == 1 & tratamento == 1), 1, 0)), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
View()
matchit(update(modelo.psm, factor(test) ~ .), data=df.psm %>% filter(turno == 2) %>% mutate(test = ifelse((quantil == 2 & tratamento == 1), 1, 0)), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
View()
matchit(update(modelo.psm, factor(test) ~ .), data=df.psm %>% filter(turno == 2) %>% mutate(test = ifelse((quantil == 4 & tratamento == 1), 1, 0)), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
View()
df.match.segmented <- df.match.segmented %>%
bind_rows(
matchit(update(modelo.psm, factor(. * (quantil == quantil.i) ~ .)), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
df.match.segmented <- data.frame()
for (quantil.i in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
matchit(update(modelo.psm, factor(. * (quantil == quantil.i) ~ .)), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
df.match.segmented <- data.frame()
for (quantil.i in c(1:5)) {
df.match.segmented <- df.match.segmented %>%
bind_rows(
matchit(update(modelo.psm, . * (quantil == quantil.i) ~ .), data=df.psm %>% filter(turno == 2), link="probit", replace = T) %>%
get_matches(distance = "propscore", data=df.psm %>% filter(turno == 2)) %>%
select(id_municipio) %>%
left_join(df.A %>% filter(turno == 2))
)
}
#Balanceamento depois do propensity
df.psm %>%
semi_join(df.match, by = "id_municipio") %>%
mutate(ps = predict(glm(modelo.psm, data = ., family = binomial(link = "logit")), type = "response")) %>%
ggplot() +
geom_density(aes(ps, fill = tratamento), alpha = .7) +
facet_wrap("quantil")
#Balanceamento depois do propensity
df.psm %>%
semi_join(df.match.segmented, by = "id_municipio") %>%
mutate(ps = predict(glm(modelo.psm, data = ., family = binomial(link = "logit")), type = "response")) %>%
ggplot() +
geom_density(aes(ps, fill = tratamento), alpha = .7) +
facet_wrap("quantil")
iplot(list(
feols(modelo.feols, data = df.match.segmented %>% filter(turno == 2 & quantil == 1)),
feols(modelo.feols, data = df.match.segmented %>% filter(turno == 2 & quantil == 2)),
feols(modelo.feols, data = df.match.segmented %>% filter(turno == 2 & quantil == 3)),
feols(modelo.feols, data = df.match.segmented %>% filter(turno == 2 & quantil == 4))
))
