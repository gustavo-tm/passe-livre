library(mycflights13)
library(mycflights13)
library(mycflights13)
library(mycflights13)
library(mycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
intall.packages(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
flights
library(nycflights13)
flights
hts %>%
filter(month == 1)
flights %>%
filter(month == 1)
flights %>%
filter(month == 1, `dep_time` == 517)
flights %>%
filter(`dep_time` == 517)
flights %>%
filter(*)
flights %>%
count(origin)
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
# Questão 1 ----
strsplit("isso e teste")
strsplit("isso e teste", " ")
?unlist
unlist(options())
unlist(options(), use.names = FALSE)
options()
?cat
?rev
reverse_phrase <- function(phrase) {
rev(phrase)
}
reverse_phrase("Escola é Insper")
reverse_phrase <- function(phrase) {
return rev(phrase)
}
reverse_phrase("Escola é Insper")
cat(rev(phrase))
reverse_phrase <- function(phrase) {
cat(rev(phrase))
}
reverse_phrase("Escola é Insper")
rev(c(1,2))
reverse_phrase <- function(phrase) {
cat(rev(strsplit(phrase)))
}
reverse_phrase("Escola é Insper")
cat(rev(strsplit(phrase, " ")))
reverse_phrase <- function(phrase) {
cat(rev(strsplit(phrase, " ")))
}
reverse_phrase("Escola é Insper")
reverse_phrase <- function(phrase) {
cat(unlist(rev(strsplit(phrase, " "))))
}
reverse_phrase("Escola é Insper")
cat(unlist(rev(strsplit("Escola é Insper", " "))))
strsplit("Escola é Insper", " ")
strsplit("Escola é Insper", " ")
strsplit("Escola é Insper", " ")
rev(strsplit("Escola é Insper", " "))
rev(strsplit("Escola é Insper", " "))
rev(strsplit("Escola é Insper", " "))
rev(strsplit("Escola é Insper", " "))
rev(strsplit("Escola é Insper", " "))
cat(rev(unlist(strsplit("Escola é Insper", " "))))
reverse_phrase <- function(phrase) {
cat(rev(unlist(strsplit(phrase, " "))))
}
reverse_phrase("Escola é Insper")
f <- function(x) x^2 - 5
plot(f, xlim = c(-1,1))
plot_product <- function(f, g, limits) {
plot(f, g, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * ,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
plot(f, g, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
plot(f * g, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f * g
plot(h, xlim = c(-1,2))
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(f, g) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
# Questão 2 ----
plot_product <- function(f, g, limits) {
h <- function(f, g, x) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
plot_product <- function(f, g, limits) {
h <- function(x) f(x) * g(x)
plot(h, xlim = limits)
}
plot_product(
function(x) x^2 - 5,
function(x) x^3 + 2 * x,
c(-4, 4)
)
numeric(25)
[1:25]
c(1:25)
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
}
cat(unlist(rev(strsplit(phrase, " ")))) a
a
a[25] == 2
a[25] - 2
# Questão 3 ----
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
cat(a[i])
}
# Questão 3 ----
a <- numeric(25)
a[1] = sqrt(2)
for (i in c(2:25)) {
a[i] <- sqrt(2 * a[i-1])
print(a[i])
}
diag(c(1,1))
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE)
# Questão 4 ----
multiply_matrices(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- (M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- (M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
(M <- M %*% m)
}
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
print(M)
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE) %*% matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE) %*%    matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
M
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
1== 1 & 2==2
1== 1 & 2==3
1== 1 & 2==2 & 5==5
1==1==1
1==1 & ==1
1 == 1 %>% ==2
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
A
is_magic_square <- function(A) {
somas <- c(
sum(diag(A)),
rowSums(A),
colSums(A)
)
len(unique(somas)) == 1
}
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
B <- matrix(c(7, 1, 9, 2, 3, 7, 4, 9, 2),  nrow = 3, byrow = TRUE)
is_magic_square(A)
is_magic_square(B)
is_magic_square <- function(A) {
somas <- c(
sum(diag(A)),
rowSums(A),
colSums(A)
)
length(unique(somas)) == 1
}
A <- matrix(c(9, 2, 7, 4, 6, 8, 5, 10, 3), nrow = 3, byrow = TRUE)
B <- matrix(c(7, 1, 9, 2, 3, 7, 4, 9, 2),  nrow = 3, byrow = TRUE)
is_magic_square(A)
is_magic_square(B)
multiply_matrices <- function(L_mat) {
M <- diag(c(1,1))
for (m in L_mat) {
M <- M %*% m
}
M
}
multiply_matrices(
list(
matrix(c(4, 3, 2, 7), nrow = 2, byrow = TRUE),
matrix(c(3, 2, 2, 5), nrow = 2, byrow = TRUE),
matrix(c(1, 5, 2, 3), nrow = 2, byrow = TRUE)
)
)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
df <- read_csv("output/base_painel.csv") %>%
filter(ano == 2022) %>%
select(id_municipio, abstencao_1t) %>%
rename("code_muni" = "id_municipio")
data <- left_join(municipios, df, by = "code_muni")
gg <- ggplot() +
geom_sf(data = data, aes(fill = abstencao_1t), color = NA) +
scale_fill_gradient(name = "Abstenções (%)", low = "white", high = "red", na.value = "white", limits = c(0,.5)) +
theme(panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks = element_blank())
gg
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(readr)
library(tidyverse)
library(geobr)
library(ggplot2)
library(ggspacial)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
?read_municipality
library(geobr)
municipios <- read_municipality(code_muni = "all", year = 2018)
municipios <- read_municipality(code_muni = "all", year = 2018)
library(tidyverse)
library(ggrepel)
library(plotly)
table
View(who)
who %>%
pivot_longer(-(country:year), names_to = "key", values_to = "cases") %>%
mutate(key = str_replace(key, "rewrel", "new_rel")) %>%
separate(key, into = c("new", "type", "sex_age"), sep = "_") %>%
separate(sex_age, into = c("sex", "age"), sep = 1) %>%
mutate(sex = str_to_upper(sex)) %>%
separate(age, into = c("min_age", "max_age"), sep = -2)
?paste0
who %>%
pivot_longer(-(country:year), names_to = "key", values_to = "cases") %>%
mutate(key = str_replace(key, "rewrel", "new_rel")) %>%
separate(key, into = c("new", "type", "sex_age"), sep = "_") %>%
separate(sex_age, into = c("sex", "age"), sep = 1) %>%
mutate(sex = str_to_upper(sex)) %>%
separate(age, into = c("min_age", "max_age"), sep = -2) %>%
mutate(age = ifelse(min_age == "", "65+", paste0(min_age, "-", max_age))) %>%
select(country:sex, age, cases, -new, -iso2)
pnorm(1)
1%%2
5%2
5 % 2
5 %% 2
words
sentences
library(tidyverse)
sentences
words
morse
words
words[1]
words[2]
words[3]
words[3][1]
words[3][1:1]
words[3,1]
words[3]
startsWith( 'Testing', 'Test')
days
day
weekdays
weekdays(1)
numbers <- c(10, 20)
other <- c(1, 2, 3, 4)
numbers + other
install.packages("microbenchmark")
library(microbenchmark)
gapminder
library(tidyverse)
gapminder
library(gapminder)
install.packages("gapminder")
gapminder
library(gapminder)
gapminder
gapminder %>% View()
teste.mutate <- function(){
gapminder %>% mutate(pib = pop * gdpPercapita)
}
df <- gapminder
teste.mutate <- function(){
df %>% mutate(pib = pop * gdpPercapita)
}
teste.for <- function(){
for(i in 1:length(df)){
df$pib[i] = df$pop[i] * df$gdpPercapita[i]
}
}
microbenchmark(teste.mutate, teste.for)
microbenchmark(sqrt(10), 10^0.5)
library(microbenchmark)
microbenchmark(sqrt(10), 10^0.5)
microbenchmark(
sqrt(10), 10 ^ 0.5
)
library(microbenchmark)
microbenchmark(
sqrt(10),
10 ^ 0.5
)
?pivot_longer
library(tidyverse)
pivot_longer
?pivot_longer
#Exercício 1 ----
library(tidyverse)
#Utilizando o vetor de palavras word, imprima todas as palavras que começam com "a" e terminam com "t"
words
#Utilizando o vetor de palavras word, imprima todas as palavras que começam com "a" e terminam com "t"
class(words)
#Utilizando o vetor de palavras word, imprima todas as palavras que começam com "a" e terminam com "t"
words
setwd("C:/git/passe-livre")
